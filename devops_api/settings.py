"""
Django settings for pigs-devops-apps project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
import datetime

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from decouple import config

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(mi_r9mgq1j$9@1e41_f9i4n2a1121uvaqm-fax_ye8ycgqj=_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_celery_beat',
    'django_celery_results',
    'corsheaders',
    'apps.k8s',
    'apps.account',
    'apps.rbac',
    'apps.cmdb',
    'apps.application',
    'channels',

]

MIDDLEWARE = [
    'log_request_id.middleware.RequestIDMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'devops_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'devops_api.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DB_TABLE'),  # 数据库名
        'USER': config('DB_USER'),  # 用户名
        'PASSWORD': config('DB_PASS'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
        'OPTIONS': {
            "init_command": "SET foreign_key_checks = 0;",
        }
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://{0}:{1}/{2}".format(config('CACHES_REDIS_HOST'), config('CACHES_REDIS_PORT'), config('CACHES_REDIS_DB')),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {
                "max_connections": 300,
                "decode_responses": False,
            },
            "PASSWORD": config('CACHES_REDIS_PASS')
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = 'files/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'files')

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, '../static/'),

]

REST_FRAMEWORK = {
    # 生成api接口文档
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # 设置所有接口都需要被验证
    'DEFAULT_PERMISSION_CLASSES': [
        'utils.permissions.MyPermission',
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',

    ],
    # 关闭rest_framework
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],

    'UNAUTHENTICATED_USER': None,  # 匿名, request.user = None
    'UNAUTHENTICATED_TOKEN': None,  # 匿名, request.auth = None

    # 用户登陆认证方式
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'utils.authorization.MyAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ],
    'DEFAULT_THROTTLE_CLASSES': ['utils.throttle.VisitThrottle'],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '15/m',  # 匿名用户
        'user': '200/m'  # 登录用户, 一分钟限制访问20次
    },
    # 导入版本控制类
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_VERSION': 'v1',
    'ALLOWED_VERSIONS': ['v1', 'v2'],
    # URL中获取值的key ?version=v1
    'VERSION_PARAM': 'version',
    # 分页
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# log_path是存放日志的路径
CUREENT_PATH = os.path.dirname(os.path.realpath(__file__))
LOG_PATH = os.path.join(os.path.dirname(CUREENT_PATH), 'logs')
# 工具目录
UNITS = os.path.join(os.path.dirname(CUREENT_PATH), 'utils')
# 如果不存在这个logs文件夹，就自动创建一个
if not os.path.exists(LOG_PATH): os.mkdir(LOG_PATH)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'request_id': {
            '()': 'log_request_id.filters.RequestIDFilter'
        }
    },
    'formatters': {
        'standard': {
            'format': '[%(asctime)s] - [%(levelname)s] - [%(request_id)s] %(module)s %(funcName)s [%(lineno)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'filters': ['request_id'],
            'formatter': 'standard',
        },
        # 默认记录所有日志
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_PATH, 'monitor.log'),
            # 'maxBytes': 1024 * 1024 * 5,  # 文件大小
            # 'backupCount': 5,  # 备份数
            'formatter': 'standard',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
        },
    },
    'loggers': {
        'default': {
            'handlers': ['console', 'default'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}
# 获取request_id
LOG_REQUEST_ID_HEADER = 'HTTP_X_REQUEST_ID'
LOG_REQUESTS = True

# jwt载荷中的有效期设置
JWT_AUTH = {
    # token 有效期
    'JWT_EXPIRATION_DELTA': datetime.timedelta(hours=4),
    'JWT_ALLOW_REFRESH': True,
    # 默认JWT, 请求时JWT token
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    # 续期有效期（该设置可在24小时内带未失效的token 进行续期）
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(hours=24),
    # 自定义返回格式，需要手工创建
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'utils.jwt.jwt_response_payload_handler',
    # 这是用于签署JWT的密钥，确保这是安全的，不共享不公开的
    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_GET_USER_SECRET_KEY': None,
    'JWT_PUBLIC_KEY': None,
    'JWT_PRIVATE_KEY': None,
    'JWT_ALGORITHM': 'HS256',
    # 如果秘钥是错误的，它会引发一个jwt.DecodeError
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
}

# 跨域增加忽略
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = ()
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)
# 定义用户表id字段,  否则将报错 getattr(user, api_settings.USER_ID_FIELD)
SIMPLE_JWT = {
    'USER_ID_FIELD': 'id'
}

# 自定义认证
AUTH_USER_MODEL = 'account.User'
# 自定义验证, 通过手机号,邮件登陆系统
AUTHENTICATION_BACKENDS = (
    'utils.backends.MobileOrEmailBackend',
    # 'django.contrib.auth.backends.ModelBackend',
)

# 调整使用md5加密用户密码
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.MD5PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.SHA1PasswordHasher',
    'django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher',
    'django.contrib.auth.hashers.UnsaltedMD5PasswordHasher',
    'django.contrib.auth.hashers.CryptPasswordHasher',
]

# Celery Configuration Options
# BROKER_URL = 'redis://127.0.0.1:6379/1'
CELERY_RESULT_BACKEND = 'django-db'
# 使用和DJango相同的时区
CELERY_TIMEZONE = TIME_ZONE
# 使用本地触发celery任务
CELERY_ENABLE_UTC = False
# 解决不同时区时间类型，冲突
# DJANGO_CELERY_BEAT_TZ_AWARE = True
CELERY_TASK_TRACK_STARTED = True
# 任务结果的时效时间
CELERY_TASK_IGNORE_RESULT = False
CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 24
# 单个任务最大运行时间, 超过的话就被杀掉
CELERY_TASK_TIME_LIMIT = 20 * 60
# celery 的启动工作数量设置
CELERY_WORKER_CONCURRENCY = 20
# 任务预取功能，就是每个工作的进程／线程在获取任务的时候，会尽量多拿 n 个，以保证获取的通讯成本可以压缩。
CELERYD_PREFETCH_MULTIPLIER = 20
# 非常重要,有些情况下可以防止死锁
CELERYD_FORCE_EXECV = True
# celery 的 worker 执行多少个任务后进行重启操作
CELERY_WORKER_MAX_TASKS_PER_CHILD = 100
CELERY_CREATE_MISSING_QUEUES = True
CELERYD_TASK_SOFT_TIME_LIMIT = 600

# celery beat配置
DJANGO_CELERY_BEAT_TZ_AWARE = False
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# log路径
NOW_TIME = str(datetime.datetime.now().strftime("%Y%m%d"))

CELERY_LOG_DIR = os.path.join(BASE_DIR, "logs/celery/")
CELERYD_LOG_FILE = CELERY_LOG_DIR + "celery_{0}.log".format(NOW_TIME)
# beat log路径
CELERYBEAT_LOG_FILE = CELERY_LOG_DIR + "celery/beat_{0}.log".format(NOW_TIME)
ERROR_LOG = CELERY_LOG_DIR + "logs/error_{}.log".format(NOW_TIME)

# clery内容消息格式设置
CELERY_ACCEPT_CONTENT = ['json', 'pickle']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'


ASGI_APPLICATION = "devops_api.asgi.application"


# Email Settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_SSL = config('EMAIL_USE_SSL')
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_FROM = config('EMAIL_FROM')
CONFIRM_DAYS = 1

# 配置channel的通道层
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": ["redis://:rRgbTir79@192.168.1.234:6379/0"],
        },
    },
}
